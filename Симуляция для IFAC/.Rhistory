demo()
library(ggplot2)
?airquality
View(airquality)
str(airquality)
data(airquality)
airquality$Manth <- as.factor(airquality$Manth)
?as.factor
airquality$Manth <- as.factor(airquality$Manth, levels = 9)
airquality$Manth <- as.factor(airquality$Manth, 9)
airquality$Manth <- as.factor(airquality$Manth, 5)
airquality$Manth <- as.factor(airquality$Manth)
airquality$Month <- as.factor(airquality$Month)
str(airquality)
ggplot(data = airquality, aes(x = airquality$Month, y = airquality$Ozone)) +
boxplot()
ggplot(data = airquality, aes(x = Month, y = Ozone)) +
boxplot()
ggplot(data = airquality, aes(x = Month, y = Ozone)) +
geom_boxplot()
ggplot(data = mtcars, aes(x = mpg, y = disp, col = hp)) +
geom_point()
plot1 <- ggplot(data = mtcars, aes(x = mpg, y = disp, col = hp)) +
geom_point()
plot1
ggplot(iris, aes(Sepal.Length, col = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
ggplot(iris, aes(Sepal.Length, fill = Species)) + geom_histogram()
ggplot(iris, aes(Sepal.Length)) + geom_histogram(fill = Species)
ggplot(iris, aes(Sepal.Length)) + geom_histogram(aes(fill = Species))
install.packages(c("devtools", "Hmisc"))
1:10
nrow(1:10)
length(1:10)
NA.position <- function(x){
return(1:length(x)[is.na(x)])
}
NA.position(c(1, 3, NA, NA, 4, NA, 5, 6, NA))
vect = c(1, 3, NA, NA, 4, NA, 5, 6, NA)
is.na(vect)
length(vect)
NA.position(c(1, 3, NA, NA, 4, NA, 5, 6, NA))
NA.position <- function(x){
# put your code here
return((1:length(x))[is.na(x)])
}
View(NA.position)
NA.position(vect)
~T
not TRUE
~False
T
!False
!F
!T
filtered.sum <- function(x){
# put your code here
return(sum(x[!is.na(x) & x > 0]))
}
filtered.sum(vect)
filtered.sum(vect)
filtered.sum(vect)
filtered.sum(c(NA, NA, NA, NA, NA, 0, 1, -5, 3, 1, 3, 2, 6, 6, 2, 2, 2, 3, 2, -1))
?sum
rand()
nrand()
unif(100)
vect = c(7, 872, 2, 15, 892, -238, 8, 5, 7, 10, 13, 1, 5)
quantile(x, probs = c(0.25, 0.75))
quantile(vect, probs = c(0.25, 0.75))
IQR(vect)
str(quantile(vect, probs = c(0.25, 0.75)))
quantile(vect, probs = c(0.25, 0.75))[1]
quantile(vect, probs = c(0.25, 0.75))[2]
outliers.rm <- function(x){
# put your code here
rg = 1.5 * IQR(x)
q = quantile(x, probs = c(0.25, 0.75))
return(x[-1.5 * rg + q[1] <= x & x <= 1.5 * rg + q[2]])
}
outliers.rm(vect)
df <- read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv')
df$Fail <- as.logical(df$Fail)
mean(df$avgErr)
mean(df$avgMaxErr)
mean(df$avgErr)
mean(df$avgMaxErr)
length(subset(df, less5cmErrTime < 0))
length(subset(df, less5cmErrTime < 0)$Fail)
length(subset(df, less5cmErrTime > 0)$Fail)
length(subset(df, less5cmErrTime < 0)$Fail)
mean(df$less5cmErrTime)
mean(df$less5cmErrTime)
mean(df$less10cmErrTime)
mean(df$less15cmErrTime)
mean(df$less20cmErrTime)
length(subset(df, less5cmErrTime < 0)$Fail)
mean(df$less10cmErrTime)
mean(df$less15cmErrTime)
mean(df$less20cmErrTime)
df <- read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv')
df$Fail <- as.logical(df$Fail)
length(subset(df, Fail))
length(subset(df, Fail)$Fail)
length(subset(df, Fail)$Fail)
df <- read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv')
df$Fail <- as.logical(df$Fail)
length(subset(df, Fail)$Fail)
df <- read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv')
levels(df$Fail)
df <- read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv')
levels(df$Fail)
df$Fail <- as.logical(df$Fail)
length(subset(df, Fail)$Fail)
dfNFail <- subset(df, !Fail)
View(dfNFail)
dfNFail <- subset(df, !Fail)
mean(dfNFail$avgErr)
mean(dfNFail$avgMaxErr)
length(subset(dfNFail, less5cmErrTime < 0)$Fail)
length(subset(dfNFail, less10cmErrTime < 0)$Fail)
length(subset(dfNFail, less15cmErrTime < 0)$Fail)
length(subset(dfNFail, less20cmErrTime < 0)$Fail)
mean(dfNFail$less5cmErrTime)
mean(dfNFail$less10cmErrTime)
mean(dfNFail$less15cmErrTime)
mean(dfNFail$less20cmErrTime)
mean(subset(dfNFail, less5cmErrTime > 0)$less5cmErrTime)
mean(subset(dfNFail, less10cmErrTime > 0)$less10cmErrTime)
mean(subset(dfNFail, less15cmErrTime > 0)l$less15cmErrTime)
length(subset(dfNFail, less5cmErrTime < 0)$Fail)
length(subset(dfNFail, less10cmErrTime < 0)$Fail)
length(subset(dfNFail, less15cmErrTime < 0)$Fail)
length(subset(dfNFail, less20cmErrTime < 0)$Fail)
mean(subset(dfNFail, less5cmErrTime > 0)$less5cmErrTime)
mean(subset(dfNFail, less10cmErrTime > 0)$less10cmErrTime)
mean(subset(dfNFail, less15cmErrTime > 0)$less15cmErrTime)
mean(subset(dfNFail, less20cmErrTime > 0)$less20cmErrTime)
calc_quality_stats <- function(df) {
df$Fail <- as.logical(df$Fail)
dfNFail <- subset(df, !Fail)
return(c(
length(subset(df, Fail)$Fail),
mean(dfNFail$avgErr),
mean(dfNFail$avgMaxErr),
length(subset(dfNFail, less5cmErrTime < 0)$Fail),
length(subset(dfNFail, less10cmErrTime < 0)$Fail),
length(subset(dfNFail, less15cmErrTime < 0)$Fail),
length(subset(dfNFail, less20cmErrTime < 0)$Fail),
mean(subset(dfNFail, less5cmErrTime > 0)$less5cmErrTime),
mean(subset(dfNFail, less10cmErrTime > 0)$less10cmErrTime),
mean(subset(dfNFail, less15cmErrTime > 0)$less15cmErrTime),
mean(subset(dfNFail, less20cmErrTime > 0)$less20cmErrTime)
))
}
calc_quality_stats(df)
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv'))
calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv'))
data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr" , "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime" ,"avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr" , "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime" ,"avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
View(common_table)
cbind(common_table, c1)
c1 <- calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv'))
c2 <- calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv'))
c3 <- calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv'))
c4 <- calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv'))
cbind(common_table, c1)
common_table <- cbind(common_table, c1)
common_table <- data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr" , "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime" ,"avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- rbind(common_table, c1)
common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
common_table <- rbind(common_table, c1)
c1 <- c("rndsinsum_phs006amp13", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv')))
c2 <- c("rndsinsum_phs003amp13", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv')))
c3 <- c("zigzag", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv')))
c4 <- c("streight", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv')))
common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
common_table <- rbind(common_table, c1)
c1
c1 <- c("rndsinsum_phs006amp13", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv')))
c2 <- c("rndsinsum_phs003amp13", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv')))
c3 <- c("zigzag", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv')))
c4 <- c("streight", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv')))
common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
common_table <- rbind(common_table, c1)
c1
c(1, 2, "3")
c(1, 2, 3)
list(1, 2, "3")
c1 <- c("rndsinsum_phs006amp13", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv')))
c2 <- c("rndsinsum_phs003amp13", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv')))
c3 <- c("zigzag", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv')))
c4 <- c("streight", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv')))
c1
calc_quality_stats <- function(df) {
df$Fail <- as.logical(df$Fail)
df$avgErr <- as.numeric(df$avgErr)
df$avgMaxErr <- as.numeric(df$avgMaxErr)
df$less5cmErrTime <- as.numeric(df$less5cmErrTime)
df$less10cmErrTime <- as.numeric(df$less10cmErrTime)
df$less15cmErrTime <- as.numeric(df$less15cmErrTime)
df$less20cmErrTime <- as.numeric(df$less20cmErrTime)
dfNFail <- subset(df, !Fail)
return(list(
length(subset(df, Fail)$Fail),
mean(dfNFail$avgErr),
mean(dfNFail$avgMaxErr),
length(subset(dfNFail, less5cmErrTime < 0)$Fail),
length(subset(dfNFail, less10cmErrTime < 0)$Fail),
length(subset(dfNFail, less15cmErrTime < 0)$Fail),
length(subset(dfNFail, less20cmErrTime < 0)$Fail),
mean(subset(dfNFail, less5cmErrTime > 0)$less5cmErrTime),
mean(subset(dfNFail, less10cmErrTime > 0)$less10cmErrTime),
mean(subset(dfNFail, less15cmErrTime > 0)$less15cmErrTime),
mean(subset(dfNFail, less20cmErrTime > 0)$less20cmErrTime)
))
}
c1 <- c("rndsinsum_phs006amp13", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv')))
c2 <- c("rndsinsum_phs003amp13", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv')))
c3 <- c("zigzag", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv')))
c4 <- c("streight", calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv')))
c1
common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
common_table <- rbind(common_table, c1)
c1 <- merge(list("rndsinsum_phs006amp13"), calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv')))
common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
common_table <- rbind(common_table, c1)
names(c1) <- c("scene_type", "fail_count", "avgErr", "avgMaxErr", "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime", "avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
common_table <- rbind(common_table, c1)
#common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
common_table <- data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr", "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime", "avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- rbind(common_table, c1)
c1
View(c1)
#common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
#common_table <- data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr", "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime", "avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- data.frame(c1)
#common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
#common_table <- data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr", "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime", "avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- data.frame(c1, c2)
#common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
#common_table <- data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr", "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime", "avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- data.frame(c(c1, c2))
#common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
#common_table <- data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr", "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime", "avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- data.frame(c1)
common_table <- rbind(common_table, c2)
c1 <- merge(list("rndsinsum_phs006amp13"), calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs006Amp13_walls_experiments.csv')))
c2 <- merge(list("rndsinsum_phs003amp13"), calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/random_sinus_Phs003Amp13_walls_experiments.csv')))
c3 <- merge(list("zigzag"), calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/zig_zag_experiments.csv')))
c4 <- merge(list("streight"), calc_quality_stats(read.csv('/home/petr/Рабочий стол/python/Симуляция для IFAC/streight_line_experiments.csv')))
names(c1) <- c("scene_type", "fail_count", "avgErr", "avgMaxErr", "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime", "avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
names(c2) <- names(c1)
names(c3) <- names(c2)
names(c4) <- names(c3)
#common_table <- data.frame("scene_type" = "undefined", "fail_count" = 0, "avgErr" = 0, "avgMaxErr" = 0, "more5cmErrCnt" = 0, "more10cmErrCnt" = 0, "more15cmErrCnt" = 0, "more20cmErrCnt" = 0, "avg5cmErrTime" = 0, "avg10cmErrTime" = 0, "avg15cmErrTime" = 0, "avg20cmErrTime" = 0)
#common_table <- data.frame("scene_type", "fail_count", "avgErr", "avgMaxErr", "more5cmErrCnt", "more10cmErrCnt", "more15cmErrCnt", "more20cmErrCnt", "avg5cmErrTime", "avg10cmErrTime", "avg15cmErrTime", "avg20cmErrTime")
common_table <- data.frame(c1)
common_table <- rbind(common_table, c2)
common_table <- rbind(common_table, c3)
common_table <- rbind(common_table, c4)
write.csv(common_table, "/home/petr/Рабочий стол/python/Симуляция для IFAC/common_table.csv")
setwd('/home/petr/Рабочий стол/python')
df <- read.csv('velocity.csv')
names(df) <- c('VX1', 'VY1', 'VX2', 'VY2', 'VX3', 'VY3', 'VX4', 'VY4', 'VX5', 'VY5', 'VX6', 'VY6')
View(df)
setwd('/home/petr/Рабочий стол/python')
setwd('/home/petr/Рабочий стол/python/Симуляция для IFAC')
df <- read.csv('velocity.csv')
names(df) <- c('VX1', 'VY1', 'VX2', 'VY2', 'VX3', 'VY3', 'VX4', 'VY4', 'VX5', 'VY5', 'VX6', 'VY6')
View(df)
V <- as.data.frame((df[, 2*1:6-1]**2+df[, 2*1:6]**2)**0.5)
names(V) <- c('AV1', 'AV2', 'AV3', 'AV4', 'AV5', 'AV6')
View(V)
colors = c('red', 'green', 'blue', 'yellow', 'black', 'pink', 'gray', 'purple')
TimeAxis = 0.02*1:length(V[, 1])
plot(TimeAxis, V[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Модули скорости')
for(j in 2:6) {
lines(TimeAxis, V[, j], 's', col = colors[j])
}
plot(TimeAxis, df[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Скорость по оси X')
for(j in 2:6) {
lines(TimeAxis, df[, 2*j-1], 's', col = colors[j])
}
plot(TimeAxis, df[, 2], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Скорость по оси Y')
for(j in 2:6) {
lines(TimeAxis, df7[, 2*j], 's', col = colors[j])
}
TimeAxis = 0.02*1:length(V[, 1])
plot(TimeAxis, V[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Модули скорости')
setwd('/home/petr/Рабочий стол/python/Симуляция для IFAC')
df <- read.csv('velocity.csv')
names(df) <- c('VX1', 'VY1', 'VX2', 'VY2', 'VX3', 'VY3', 'VX4', 'VY4', 'VX5', 'VY5', 'VX6', 'VY6')
View(df)
V <- as.data.frame((df[, 2*1:6-1]**2+df[, 2*1:6]**2)**0.5)
names(V) <- c('AV1', 'AV2', 'AV3', 'AV4', 'AV5', 'AV6')
colors = c('red', 'green', 'blue', 'yellow', 'black', 'pink', 'gray', 'purple')
TimeAxis = 0.02*1:length(V[, 1])
plot(TimeAxis, V[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Модули скорости')
plot?
?plot
plot(TimeAxis, V[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Модули скорости')
for(j in 2:6) {
lines(TimeAxis, V[, j], 's', col = colors[j])
}
?plot
plot(TimeAxis, V[, 1])
#plot(TimeAxis, V[, 1])
plot(TimeAxis, V[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Модули скорости')
#plot(TimeAxis, V[, 1])
plot(TimeAxis, V[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Модули скорости')
TimeAxis = 0.02*1:length(V[, 1])
#plot(TimeAxis, V[, 1])
plot(TimeAxis, V[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Модули скорости')
for(j in 2:6) {
lines(TimeAxis, V[, j], 's', col = colors[j])
}
setwd('/home/petr/Рабочий стол/python/Симуляция для IFAC')
df <- read.csv('velocity.csv')
names(df) <- c('VX1', 'VY1', 'VX2', 'VY2', 'VX3', 'VY3', 'VX4', 'VY4', 'VX5', 'VY5', 'VX6', 'VY6')
V <- as.data.frame((df[, 2*1:6-1]**2+df[, 2*1:6]**2)**0.5)
names(V) <- c('AV1', 'AV2', 'AV3', 'AV4', 'AV5', 'AV6')
colors = c('red', 'green', 'blue', 'yellow', 'black', 'pink', 'gray', 'purple')
TimeAxis = 0.02*1:length(V[, 1])
plot(TimeAxis, V[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Модули скорости')
for(j in 2:6) {
lines(TimeAxis, V[, j], 's', col = colors[j])
}
plot(TimeAxis, df[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Скорость по оси X')
for(j in 2:6) {
lines(TimeAxis, df[, 2*j-1], 's', col = colors[j])
}
plot(TimeAxis, df[, 2], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Скорость по оси Y')
for(j in 2:6) {
lines(TimeAxis, df[, 2*j], 's', col = colors[j])
}
plot(TimeAxis, df[, 2], 's', col = colors[1], ylim = c(-4, 4), xlab = 'Время', ylab = 'Скорость', main = 'Скорость по оси Y')
for(j in 2:6) {
lines(TimeAxis, df[, 2*j], 's', col = colors[j])
}
plot(TimeAxis, df[, 1], 's', col = colors[1], ylim = c(0, 4), xlab = 'Время', ylab = 'Скорость', main = 'Скорость по оси X')
for(j in 2:6) {
lines(TimeAxis, df[, 2*j-1], 's', col = colors[j])
}
plot(TimeAxis, df[, 2], 's', col = colors[1], ylim = c(-4, 4), xlab = 'Время', ylab = 'Скорость', main = 'Скорость по оси Y')
for(j in 2:6) {
lines(TimeAxis, df[, 2*j], 's', col = colors[j])
}
